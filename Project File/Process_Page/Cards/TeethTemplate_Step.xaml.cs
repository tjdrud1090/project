using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using Process_Page.ToothTemplate;
using Process_Page.ViewModel;

namespace Process_Page.Cards
{
    /// <summary>
    /// TeethTemplate_Step.xaml에 대한 상호 작용 논리
    /// </summary>
    /// 

    using ToothList = ObservableCollection<ObservableCollection<ObservableCollection<PointViewModel>>>;
    using ToothType = ObservableCollection<ObservableCollection<PointViewModel>>;
    using TeethType = ObservableCollection<PointViewModel>;

    public partial class TeethTemplate_Step : UserControl
    {
        #region PointsData

        double[,,] UpperX = {{{ 64.333333, 88.500336, 101.167, 109.16659, 100.49974, 15.167815,3.1676365 , 5.1672837, 13.833865, 34.500329 },
                         { 153.66667, 180.49967, 187.16633, 179.83274,169.83284 , 117.1667, 109.83307, 109.83307, 116.50001, 131.16654 },
                         { 226.33333, 238.50033, 237.83367, 240.50034, 213.83366, 186.50097, 179.83439, 185.16797, 194.50114, 207.83424 }},

                        {{ 61, 88.5, 104.5, 113.83333, 105.16695, 8.4996662, 1.8329572, 6.4999729, 20.50002, 37.833412 },
                         { 145, 163.83333, 172.50048, 179.16725, 164.50014, 112.49976, 102.49969, 106.49972,121.83316, 128.49988 },
                         { 211.66667, 233.16634, 242.49919, 231.16603, 206.49975, 175.16691, 170.49997, 176.4999, 187.16646, 198.49967 }},

                        {{ 64.333333, 88.500336, 101.83367, 105.16737, 97.167027, 16.500301, 1.1669568, 0.49995428, 11.833332, 31.833411 },
                         { 155.66667, 178.49967, 180.49966, 176.49967, 166.49967, 111.16635, 99.832633,105.1663, 118.49964, 135.16631 },
                         { 230.33333, 245.16699, 245.83331, 240.50032, 227.167, 172.49905, 168.49899, 172.49905, 191.83271, 207.83299 } },

                        {{ 60.333333, 81.166999, 97.833067,108.49999, 107.16667, 96.500077, 17.833965, 1.1678108, 5.167447, 23.833971 },
                         { 164.33333, 184.50033, 189.167, 182.50009, 178.50015, 119.83424, 107.16813, 111.16774, 122.50092, 141.16733 },
                         { 234.33333, 245.83366, 243.16725, 238.50045, 225.83341, 210.50023, 189.83331, 178.50024, 187.83364, 207.16709 } },

                        {{ 71, 94.5, 111.5, 111.5, 101.5, 54, 5.5, 0.5, 10.5, 42.5 },
                         { 159, 178, 182, 180.5, 167.5, 141, 112, 114, 120, 141.5 },
                         { 238, 245.5, 240, 232.5, 213.5, 192.5, 181.5, 183.5, 193, 213.5 }}

                        };

        double[,,] UpperY = {{{ 9, 33.833333, 63.167391, 122.50082, 164.50113, 169.8345, 142.50125, 103.83422, 59.833808, 26.500164 },
                          { 21, 63.833333, 110.50069, 145.16763, 156.50069, 153.83401, 137.83393, 105.16709 ,65.16689, 35.166738 },
                          { 3, 22.5, 65.833333, 117.16728, 148.50035, 131.16698, 95.833557, 62.500144, 36.500081, 15.833364 }},

                        {{ 27, 55.166667, 102.49911, 138.49868, 160.49843,164.49838 , 141.83198, 82.499347, 53.166359, 35.166571 },
                         { 21, 43.166667, 74.499199, 128.49839, 153.83135, 152.49838, 121.83209,82.499241, 61.166171, 31.8332 },
                         { 4.3333333, 47.167, 84.499709, 119.16611, 147.83213, 125.83265, 103.83284, 65.833154, 43.833338, 14.500249 }},

                        {{ 25.666667, 41.166333, 83.831747, 137.83123, 163.83124, 173.16481, 142.4982, 96.498775, 59.165911, 33.166238 },
                         { 27, 55.166667, 102.49911, 138.49868, 160.49843, 164.49838, 141.83198, 82.499347, 53.166359, 35.166571 },
                         { 7, 32.5, 82.5, 125.83333, 155.83375, 135.83399, 107.83385, 61.833612, 45.83353, 21.833409 }},

                        {{ 34.333333, 33.833665, 57.818067, 90.463834, 143.76251, 165.08238, 171.74439, 129.77189,78.471767 , 47.158704 },
                         { 37.666667, 51.166335, 99.164823, 133.16347,144.49609 ,150.49589 ,125.83005 ,91.83119 ,63.832126, 46.499373 },
                         { 5, 29.166667, 65.832493, 105.16583, 134.49848, 145.83167, 132.49881, 99.832445, 48.499592, 21.833176 } },

                        {{ 24, 40.5, 93.5, 135.5, 164, 176, 172.5, 119.5, 70.5, 28 },
                         { 26.5, 45.5, 83, 123.5, 147.5, 154.5, 135, 88.5, 63.5, 40 },
                         { 5.5, 35.5, 63.5, 103, 147.5, 140.5, 114.5, 80, 50, 25 } }

                        };

        double[,,] LowerX = { // LT1
                              {{ 19, 83.833333, 96.500401, 99.167085, 87.833405, 74.500058, 44.500027, 21.166669, 7.8333217, 5.8336601 },
                               { 107, 169.83333, 183.16706, 185.16674, 179.16642, 162.49981, 137.16656, 113.83331, 95.833372, 91.833736 } },
                              // LT2
                              {{ 16.333333, 77.833667, 93.834083, 88.501032, 77.834262, 57.167396, 37.833875, 20.500374, 13.833643, 4.5005916 },
                               { 105, 164.5, 187.16667, 187.16667, 177.83304, 161.16644, 118.49995, 97.833362, 92.5004, 91.833735 }},
                              // LT3
                              {{ 21, 81.833333, 91.833724, 92.500732, 82.50063, 63.167099, 27.16673, 10.499892, 2.4998103, 4.4998307 },
                               { 106.33333, 179.167, 185.16665, 175.83306, 156.49989, 137.83339, 112.50028, 94.50044, 84.500531, 89.83382 }},
                              // LT4
                              {{ 15, 85.833333, 97.833726, 89.167316, 77.167211, 62.500416, 29.833463, 12.499978, 3.166563, 5.1662542 },
                               { 117.66667, 155.833, 187.8336, 193.16734, 175.16685, 147.83327, 114.49964, 90.499417, 97.166147, 103.83287 }},
                              // LT5
                              {{ 18.333333, 87.167001, 97.166618, 93.832982, 87.166376, 71.833182, 32.500205, 21.166975, 12.500387, 7.1671023 },
                               { 111, 142.5, 180.5, 185.83333, 183.16698, 167.16691, 127.16674, 102.49996, 95.833266, 97.833602 }}
                            };

        double[,,] LowerY = { // LT1
                              {{ 13.666667, 15.833, 31.169026, 82.508943, 139.85, 162.52012, 167.18743, 141.85034, 79.175197, 25.16789 },
                               { 12.333333, 7.8336663, 19.166494, 79.826555, 126.48894, 161.15219, 163.81826, 139.82096, 105.82432, 39.830838 } },
                              // LT2
                              {{ 24.333333, 19.833667, 33.166345, 117.82427, 169.81962, 175.15279, 173.81925, 157.15418, 119.15782, 49.831127 },
                               { 13.666667, 5.8330003, 15.832908, 80.499317, 140.49876, 171.83181, 169.83215, 136.49906, 84.499433, 25.833189 }},
                              // LT3
                              {{ 17.666667, 15.166333, 27.834357, 69.174628, 115.84813, 142.51931, 143.18609, 118.51529, 81.842959, 39.836474 },
                               { 21, 15.833333, 24.499774, 73.829932, 128.49373, 163.82499, 164.49196, 139.16005, 107.82848, 67.164108 }},
                              // LT4
                              {{ 12.333333, 13.167, 30.493075, 109.79471, 147.77999, 158.44278, 157.77638, 131.12021, 93.135171, 30.49318 },
                               { 10.333333, 7.8336663, 22.498711, 50.494977, 133.15062, 164.47936, 161.14647, 96.488605, 48.495134, 19.832367 }},
                              // LT5
                              {{ 8.3333333, 9.8336663, 23.170301, 111.18758, 147.19433, 161.19673, 159.86281, 143.19294, 106.51922, 21.836263 },
                               { 9.6666667, 5.8330003, 15.165856, 68.492314, 142.48324, 161.14762, 147.81562, 109.82036, 59.160016, 23.164505 }}
                            };


        #endregion 

        public ToothList UpperTooth, LowerTooth;
        public Dictionary<string, int> dic;
        public Point UpperGuide, LowerGuide;

        public TeethTemplate_Step()
        {
            InitializeComponent();
            this.DataContext = new TeethControlViewModel();

            // Set data for UpperTooth.
            UpperTooth = new ToothList();
            UpperGuide = new Point(0, 0);
            for (int k = 0; k < 5; k++)
            {
                ToothType template = new ToothType();
                for (int i = 0; i < 6; i++)
                {
                    TeethType teeth = new TeethType();
                    for (int j = 0; j < 10; j++)
                    {
                        if (i >= 0 && i < 3)
                            teeth.Add(new PointViewModel(UpperX[k, i, j] + UpperGuide.X, UpperY[k, i, j] + UpperGuide.Y, j));
                        else
                            teeth.Add(new PointViewModel(-1 * UpperX[k, i - 3, j] + UpperGuide.X, UpperY[k, i - 3, j] + UpperGuide.Y, j));
                    }
                    template.Add(teeth);
                }
                UpperTooth.Add(template);
            }

            // Set data for LowerTooth.
            LowerTooth = new ToothList();
            LowerGuide = new Point(0, 0);
            for (int k = 0; k < 5; k++)
            {
                ToothType tooth = new ToothType();
                for (int i = 0; i < 4; i++)
                {
                    TeethType teeth = new TeethType();
                    for (int j = 0; j < 10; j++)
                    {
                        if (i >= 0 && i < 2)
                            teeth.Add(new PointViewModel(LowerX[k, i, j] + LowerGuide.X, LowerY[k, i, j] + LowerGuide.Y, j));
                        else
                            teeth.Add(new PointViewModel(-1 * LowerX[k, i - 2, j] + LowerGuide.X, LowerY[k, i - 2, j] + LowerGuide.Y, j));
                    }
                    tooth.Add(teeth);
                }
                LowerTooth.Add(tooth);
            }

            // Set global dictionary.
            dic = new Dictionary<string, int>();
            dic.Add("CanineL", 5);
            dic.Add("LateralIncisorL", 4);
            dic.Add("CentralIncisorL", 3);
            dic.Add("CentralIncisorR", 0);
            dic.Add("LateralIncisorR", 1);
            dic.Add("CanineR", 2);          
        }
    }
}
